# -*- coding: utf-8 -*-

#Bird classifier


"""
The code is based on the tflearn of Tensorflow and some helpers
We need to import data base of bird's photos
"""

from __future__ import division, print_function, absolute_import

import tflearn
from tflearn.data_utils import shuffle
from tflearn.layers.core import input_data
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.estimator import regression
from tflearn.data_preprocessing import ImagePreprocessing
from tflearn.data_augmentation import ImageAugmentation
import pickle

#We load the data set on the program
#from tflearn.datasets import cifar10
(X,Y),(X_test, Y_test) = pickle.load(open("full_dataset.pkl","r"))


# X_test, Y_test
#We shuffle the data
X, Y = shuffle(X,Y)


#Make the sure that the data is okay
img_prep= ImagePreprocessing()
img_prep.add_featurewise_zero_center()
img_prep.add_featurewise_stdnorm()

#Create a extra synthetics training data by flipping, rotating andd blurring the images in the dataset
img_aug= ImageAugmentation()
img_aug.add_random_flip_leftright()
img_aug.add_random_rotation(max_angle=25.)
img_aug.add_random_blur(sigma_max =3.)

#Define our network architecture:

#Input is a 32x32 image with three colours channels ( red, blue and green)
network = input_data(shape =[None, 32, 32 ,3],
					data_preprocessing = img_prep,
					data_augmentation = img_aug	) #is an 2d image we only put the sizes:the large and the "ancho" and colours

#1.Convolution
network= conv_2d(network, 32, 3, activation='relu')

#2.Max pooling
network= max_pool_2d(network,2)

#3.Convolution again
network =conv_2d(network, 64, 3, activation='relu')

#4. Convolution one more time
network =conv_2d(network, 64, 3, activation='relu')

#5.Max pooling again
network=max_pool_2d(network, 2)

#6. Fully-connected 512 node neural network
network=tflearn.fully_connected(network, 512, activation='relu')

#7.Dropout- throw away some data randomly during training to prevent over-fitting
network=tflearn.dropout(network, 0.5)

#8.Fully-connected neural network with two outputs(0= Not a bird and 1=Is a bird)
#to make the final prediction
network=tflearn.fully_connected(network,2, activation='softmax')

#9. Tell tflearn how we want to train the network 
network= regression(network, optimizer='adam',
					loss = 'categorical_crossentropy',
					learning_rate = 0.001)

#10. Wrap the network in a model object 
model = tflearn.DNN(network, tensorboard_verbose=0, checkpoint_path = 'bird_classifier.tfl.ckpt')

#Train it! We are going to do 100 train passes and we monitored them.
model.fit(X,Y, n_epoch=50, shuffle=True, validation_set=(X_test, Y_test),
			show_metric=True, batch_size=96, 
			snapshot_epoch=True,
			run_id='bird_classifier')

#We save the model of the training when it is complete in to a file
model.save("bird-classifier.tfl")
print ("Network trained and saved as bird-classifier")
